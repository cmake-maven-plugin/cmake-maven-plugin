name: Build
on: [ push ]
concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  build:
    name: Build (${{ matrix.runtime }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        runtime: [ linux-x64, osx-x64, win-x64 ]
        include:
          - runtime: linux-x64
            os: ubuntu-latest

          - runtime: osx-x64
            os: macOS-latest

          - runtime: win-x64
            os: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 8

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          # Avoid caching generated artifacts
          path: |
            ~/.m2/repository/*
            !~/.m2/repository/com/googlecode/cmake-maven-plugin
          key: "${{ runner.OS }}-maven-${{ hashFiles('**/pom.xml') }}"

      # Maven command-line options:
      # --batch-mode: recommended in CI to inform maven to not run in interactive mode (less logs)
      # -V: strongly recommended in CI, will display the JDK and Maven versions in use.
      # -Dsurefire.useFile=false: useful in CI. Displays test errors in the logs directly (instead of
      #                           having to crawl the workspace files to see the cause).
      # -e: Display stack-traces on failure
      - name: Build
        run: ./mvnw install --batch-mode -V "-Dsurefire.useFile=false" -e

  build-arm:
    runs-on: ubuntu-latest
    name: Build (${{ matrix.arch }}-${{ matrix.distro }})
    strategy:
      matrix:
        include:
          - arch: armv6
            distro: bullseye
          - arch: armv7
            distro: ubuntu_latest
          - arch: aarch64
            distro: ubuntu_latest

    # Source: https://github.com/lh3/bwa/blob/139f68fc4c3747813783a488aef2adc86626b01b/.github/workflows/ci.yaml#L33-L46
    #  gcc-arm-linux-gnueabi binutils-arm-linux-gnueabi
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          # Avoid caching generated artifacts
          path: |
            ~/.m2/repository/*
            !~/.m2/repository/com/googlecode/cmake-maven-plugin
          key: "${{ runner.OS }}-maven-${{ hashFiles('**/pom.xml') }}"

      - name: Build
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ github.token }}
          install: |
            apt-get update --allow-releaseinfo-change -y
            
            case "${{ matrix.arch }}" in
              armv6|armv7)
                apt-get install wget cmake -y

                mkdir /opt/jdk/
                cd /opt/jdk
                wget https://cdn.azul.com/zulu-embedded/bin/zulu8.84.0.15-ca-jdk8.0.442-linux_aarch32hf.tar.gz
                tar -xzvf zulu8.84.0.15-ca-jdk8.0.442-linux_aarch32hf.tar.gz
            
                update-alternatives --install /usr/bin/java java /opt/jdk/zulu8.84.0.15-ca-jdk8.0.442-linux_aarch32hf/bin/java 181
                update-alternatives --install /usr/bin/javac javac /opt/jdk/zulu8.84.0.15-ca-jdk8.0.442-linux_aarch32hf/bin/javac 181
            
                rm zulu8.84.0.15-ca-jdk8.0.442-linux_aarch32hf.tar.gz
                ;;
              aarch64)
                apt-get install gnupg ca-certificates curl -y
                curl -s https://repos.azul.com/azul-repo.key | gpg --dearmor -o /usr/share/keyrings/azul.gpg
                echo "deb [signed-by=/usr/share/keyrings/azul.gpg] https://repos.azul.com/zulu/deb stable main" | tee /etc/apt/sources.list.d/zulu.list
                apt-get update --allow-releaseinfo-change -y
                apt-get install zulu8-jdk -y
                ;;
              *)
                echo "Unsupported distro: ${{ matrix.distro }}"
                exit 1
                ;;
            esac
            apt-get install build-essential -y
          setup: mkdir -p "${PWD}/.m2"
          dockerRunArgs: --volume "${PWD}/.m2:/.m2" -e GITHUB_WORKSPACE=${GITHUB_WORKSPACE}
          run: |
            export JAVA_HOME=`which java | xargs readlink -f | xargs dirname | xargs dirname`
            
            cd "${GITHUB_WORKSPACE}"
            ./mvnw install --batch-mode -V -e