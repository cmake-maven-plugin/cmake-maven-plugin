# Source: https://docs.github.com/en/actions/publishing-packages/publishing-java-packages-with-maven
name: Deploy to Maven Central
on:
  workflow_dispatch:
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
env:
  # One can look up a project's profileId by running:
  # mvn nexus-staging:rc-list-profiles -DserverId=maven-central-releases -DnexusUrl=https://oss.sonatype.org/
  STAGING_PROFILE_ID: "1a35794454094c"
  OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
  OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
  MAVEN_GPG_PASSPHRASE: ${{ secrets.MAVEN_GPG_PASSPHRASE }}
jobs:
  open-release:
    runs-on: ubuntu-latest
    outputs:
      INITIAL_REF_POSITION: ${{ steps.open-staging.outputs.INITIAL_REF_POSITION }}
      TAG: ${{ steps.open-staging.outputs.TAG }}
      STAGING_REPOSITORY_ID: ${{ steps.open-staging.outputs.STAGING_REPOSITORY_ID }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 8
          server-id: maven-central-releases
          # Server authentication corresponds to "user token" returned by https://oss.sonatype.org/
          server-username: OSSRH_USERNAME
          server-password: OSSRH_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          # Avoid caching generated artifacts
          path: |
            ~/.m2/repository/*
            !~/.m2/repository/com/googlecode/cmake-maven-project
          key: ${{ runner.OS }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.OS }}-maven-

      - name: Configure Git User
        run: |
          git config user.email "cowwoc2020@gmail.com"
          git config user.name "Gili Tzabari"

      # Maven command-line options:
      # --batch-mode: recommended in CI to inform maven to not run in interactive mode (less logs)
      # -V: strongly recommended in CI, will display the JDK and Maven versions in use.
      #      Very useful to be quickly sure the selected versions were the ones you think.
      # -e: Display stack-traces on failure
      #
      # Getting the current git tag: https://stackoverflow.com/a/50465671/14731
      #
      # Setting a GitHub Action output parameter:
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-output-parameter
      #
      # "release:prepare" must skip integration tests because "binaries-on-path-test" requires artifacts
      # to be deployed to local repository.
      - name: Open staging repository
        id: open-staging
        run: |
          echo "INITIAL_REF_POSITION=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          ./mvnw release:prepare --batch-mode -V -e -Darguments="-Ddeploy -Dinvoker.skip=true"
          echo "TAG=$(git describe --tag --abbrev=0)" >> $GITHUB_OUTPUT
          
          output=$(./mvnw --batch-mode -e -DstagingProfileId=${{ env.STAGING_PROFILE_ID }} nexus-staging:rc-open)
          [[ "$output" =~ Opened\ (comgooglecodecmake-maven-project-[[:digit:]]+) ]]
          stagingRepositoryId="${BASH_REMATCH[1]}"
          echo "STAGING_REPOSITORY_ID=$stagingRepositoryId" >> $GITHUB_OUTPUT

  deploy:
    needs: open-release
    # If the OS is 'arm64-latest' deploy to 'ubuntu-latest' instead
    # https://github.com/actions/runner/issues/409#issuecomment-752775072
    runs-on: ${{ matrix.os == 'arm64-latest' && 'ubuntu-latest' || matrix.os }}
    name: Deploy (${{ matrix.os }})
    strategy:
      # Concurrent deploys of the files that are common across platforms may lead to data corruption
      max-parallel: 1
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest, arm64-latest ]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.open-release.outputs.TAG }}
      - uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 8
          server-id: maven-central-releases
          # Server authentication corresponds to "user token" returned by https://oss.sonatype.org/
          server-username: OSSRH_USERNAME
          server-password: OSSRH_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          # Avoid caching generated artifacts
          path: |
            ~/.m2/repository/*
            !~/.m2/repository/com/googlecode/cmake-maven-project
          key: ${{ runner.OS }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.OS }}-maven-

      - run: |
          cat ~/.m2/settings.xml

      - if: ${{ matrix.os != 'arm64-latest' }}
        name: Deploy to Maven Central
        run: >
          ./mvnw --batch-mode -V -e -Ddeploy -Dportable -DstagingProfileId=${{ env.STAGING_PROFILE_ID }}
          -DstagingRepositoryId=${{ needs.open-release.outputs.STAGING_REPOSITORY_ID }}
          deploy

      # Source: https://github.com/lh3/bwa/blob/139f68fc4c3747813783a488aef2adc86626b01b/.github/workflows/ci.yaml#L33-L46
      #  gcc-arm-linux-gnueabi binutils-arm-linux-gnueabi
      - if: ${{ matrix.os == 'arm64-latest' }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: aarch64
          distro: ubuntu_latest
          githubToken: ${{ github.token }}
          install: |
            apt-get update --allow-releaseinfo-change -y

            apt-get install gnupg ca-certificates curl -y
            curl -s https://repos.azul.com/azul-repo.key | gpg --dearmor -o /usr/share/keyrings/azul.gpg
            echo "deb [signed-by=/usr/share/keyrings/azul.gpg] https://repos.azul.com/zulu/deb stable main" | tee /etc/apt/sources.list.d/zulu.list
            apt-get update --allow-releaseinfo-change -y
            apt-get install zulu8-jdk -y
            apt-get install build-essential -y
          setup: |
            ls -la ${HOME}/.gnupg
            ls -la ${HOME}/.m2
          dockerRunArgs: |
            --volume "${HOME}/.m2:/root/.host-m2" --volume "${HOME}/.gnupg:/root/.host-gnupg" 
            -e GITHUB_WORKSPACE -e MAVEN_GPG_PASSPHRASE -e OSSRH_USERNAME -e OSSRH_TOKEN
          run: |
            # Avoid copying JDK toolchain, as paths will be different
            mkdir -p ~/.m2
            cp -va ~/.host-m2/settings.xml ~/.m2/settings.xml
            
            # Fix "gpg: WARNING: unsafe ownership on homedir '/root/.gnupg'"
            mkdir -p ~/.gnupg
            cp -av ~/.host-gnupg/. ~/.gnupg/
            chown -R root ~/.gnupg
            
            ls -la ~/.m2
            ls -la ~/.gnupg

            export JAVA_HOME=$(which java | xargs readlink -f | xargs dirname | xargs dirname)
            cd "${GITHUB_WORKSPACE}"
            
            ./mvnw --batch-mode -V -e -Ddeploy -Dportable -DstagingProfileId=${{ env.STAGING_PROFILE_ID }} \
            -DstagingRepositoryId=${{ needs.open-release.outputs.STAGING_REPOSITORY_ID }} \
            deploy

  close-release:
    needs: [ open-release, deploy ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.open-release.outputs.TAG }}
      - uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 8
          server-id: maven-central-releases
          # Server authentication corresponds to "user token" returned by https://oss.sonatype.org/
          server-username: OSSRH_USERNAME
          server-password: OSSRH_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          # Avoid caching generated artifacts
          path: |
            ~/.m2/repository/*
            !~/.m2/repository/com/googlecode/cmake-maven-project
          key: ${{ runner.OS }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.OS }}-maven-

      - name: Close staging repository
        run: >
          ./mvnw --batch-mode -V -e -DstagingProfileId=${{ env.STAGING_PROFILE_ID }}
          -DstagingRepositoryId=${{ needs.open-release.outputs.STAGING_REPOSITORY_ID }}
          nexus-staging:rc-close

  # Cleanup on failure: https://stackoverflow.com/a/74562058/14731
  on-failure:
    needs: [ open-release, deploy, close-release ]
    runs-on: ubuntu-latest
    if: ${{ always() && contains(needs.*.result, 'failure') }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - uses: actions/setup-java@v3
        with:
          distribution: zulu
          java-version: 8
          server-id: maven-central-releases
          # Server authentication corresponds to "user token" returned by https://oss.sonatype.org/
          server-username: OSSRH_USERNAME
          server-password: OSSRH_TOKEN
          gpg-private-key: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          gpg-passphrase: MAVEN_GPG_PASSPHRASE
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          # Avoid caching generated artifacts
          path: |
            ~/.m2/repository/*
            !~/.m2/repository/com/googlecode/cmake-maven-project
          key: ${{ runner.OS }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.OS }}-maven-

      - name: Configure Git User
        run: |
          git config user.email "cowwoc2020@gmail.com"
          git config user.name "Gili Tzabari"

      - name: Restore the workflow ref to its original position
        if: needs.open-release.outputs.INITIAL_REF_POSITION != ''
        run: |
          CURRENT_REF_POSITION=$(git rev-parse HEAD)
          if [ "${CURRENT_REF_POSITION}" != "${{ needs.open-release.outputs.INITIAL_REF_POSITION }}" ]; then
            git reset --hard ${{ needs.open-release.outputs.INITIAL_REF_POSITION }}
            if [ "${{ github.ref_type }}" == "tag" ]; then
              git ${{ github.ref_type }} -f ${{ github.ref_name }}
            fi
            git push -f origin ${{ github.ref_name }}
          fi

      - name: Delete tag
        if: needs.open-release.outputs.TAG != ''
        run: |
          git push --delete origin ${{ needs.open-release.outputs.TAG }}

      - name: Drop staging repository
        if: needs.open-release.outputs.STAGING_REPOSITORY_ID != ''
        run: >
          ./mvnw --batch-mode -V -e -DstagingProfileId=${{ env.STAGING_PROFILE_ID }}
          -DstagingRepositoryId=${{ needs.open-release.outputs.STAGING_REPOSITORY_ID }}
          nexus-staging:rc-drop