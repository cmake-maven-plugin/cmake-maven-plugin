<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1189.va_d37a_e9e4eda_">
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>100</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.34.4">
      <projectUrl>https://github.com/cmake-maven-project/cmake-maven-project/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <com.gem.persistentparameter.PersistentStringParameterDefinition plugin="persistent-parameter@1.3">
          <name>branch</name>
          <description>What branch should be built?</description>
          <defaultValue>master</defaultValue>
          <successfulOnly>true</successfulOnly>
          <trim>false</trim>
        </com.gem.persistentparameter.PersistentStringParameterDefinition>
        <hudson.plugins.validating__string__parameter.ValidatingStringParameterDefinition plugin="validating-string-parameter@2.8">
          <name>releaseVersion</name>
          <description>What version number should be released?</description>
          <defaultValue></defaultValue>
          <regex>\d+\.\d+\.\d+-b\d+</regex>
          <failedValidationMessage>releaseVersion number must have format: &lt;major&gt;.&lt;minor&gt;.&lt;patch&gt;-b&lt;build&gt;</failedValidationMessage>
        </hudson.plugins.validating__string__parameter.ValidatingStringParameterDefinition>
        <hudson.plugins.validating__string__parameter.ValidatingStringParameterDefinition plugin="validating-string-parameter@2.8">
          <name>nextVersion</name>
          <description>What SNAPSHOT version should be used after the release?</description>
          <defaultValue></defaultValue>
          <regex>.+-SNAPSHOT</regex>
          <failedValidationMessage>Version number must end with -SNAPSHOT</failedValidationMessage>
        </hudson.plugins.validating__string__parameter.ValidatingStringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2725.v7b_c717eb_12ce">
    <script>// Command-line options (taken from https://jenkins.io/doc/pipeline/examples/):
// --batch-mode : recommended in CI to inform maven to not run in interactive mode (less logs)
// -V : strongly recommended in CI, will display the JDK and Maven versions in use.
//      Very useful to be quickly sure the selected versions were the ones you think.
// -U : force maven to update snapshots each time (default : once an hour, makes no sense in CI).
// -Dsurefire.useFile=false : useful in CI. Displays test errors in the logs directly (instead of
//                            having to crawl the workspace files to see the cause).
// -e : Display stack-traces on failure
//
//
// GCC versions
// ------------
//
// GCC outputs dynamically-linked libraries that depend on specific versions of the glibc library.
// https://gcc.gnu.org/onlinedocs/libstdc++/manual/abi.html lists which GLIBCXX version ships with each version of GCC.
// As of 2022-02-07, AWS linux images ship with GCC 11.2.1: https://docs.aws.amazon.com/linux/al2022/release-notes/all-packages-al2022.html
// Therefore, we must use this version of GCC or older.
//
// Using a newer version of GCC results in the following kind of error:
//
// java.lang.UnsatisfiedLinkError: librequirements.so: /usr/lib64/libstdc++.so.6: version `GLIBCXX_3.4.21&apos; not found (required by librequirements.so)
//
// See http://stackoverflow.com/a/17275650/14731 for overriding the GCC version used by CMake


def unauthenticatedRepository = &quot;github.com/cmake-maven-project/cmake-maven-project.git&quot;
def repository = &quot;https://${unauthenticatedRepository}&quot;
// One can look up a project&apos;s profileId by running: mvn nexus-staging:rc-list-profiles
def stagingProfileId = &quot;1a35794454094c&quot;
def stagingRepositoryId
def userEmail = &quot;cowwoc2020@gmail.com&quot;
def userName = &quot;Gili Tzabari&quot;
def repositoryIdPrefix = &quot;comgooglecodecmake-maven-project&quot;

node(&quot;linux&quot;)
{
    // http://stackoverflow.com/a/33630506/14731
    timeout(10)
    {
        stage(&quot;Checkout (linux)&quot;)
        {
            // Wipe out local repository in case it contains extra commits from a previous (broken) build
            deleteDir()
            checkout([$class: &quot;GitSCM&quot;, branches: [[name: &quot;*/${branch}&quot;]], browser: [$class: &quot;GithubWeb&quot;, repoUrl: repository], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &quot;LocalBranch&quot;, localBranch: &quot;${branch}&quot;], [$class: &quot;CleanCheckout&quot;], [$class: &quot;WipeWorkspace&quot;], [$class: &quot;MessageExclusion&quot;, excludedMessage: &quot;^\\[jenkins\\]&quot;]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &quot;github-cmake-maven-project&quot;, url: repository]]])
        }
    }
    timeout(10)
    {
        withEnv([&quot;JAVA_HOME=${tool &quot;JDK11_HOME&quot;}&quot;, &quot;GIT_HOME=${tool &quot;git&quot;}&quot;, &quot;PATH+MAVEN+GIT=${tool &quot;Maven&quot;}/bin:${tool &quot;git&quot;}:${env.JAVA_HOME}/bin&quot;])
        {
            stage(&quot;Tag release&quot;)
            {
                // Check if tag already exists: http://stackoverflow.com/a/21116365/14731
                // Commit without failure if nothing changed: http://stackoverflow.com/a/8123841/14731
                def tagExists = sh(returnStdout: true, script: &quot;git ls-remote ${repository} release-${releaseVersion} | wc -l&quot;).toBoolean()
                if (tagExists)
                    echo &quot;Tag release-&quot; + releaseVersion + &quot; already exists&quot;
                else
                {
                    echo &quot;Tagging release as release-&quot; + releaseVersion
                    // SSH authentication: https://www.jenkins.io/blog/2020/04/16/github-app-authentication/
                    withCredentials([usernamePassword(credentialsId: &quot;github-cmake-maven-project&quot;, usernameVariable: &quot;GITHUB_APP&quot;, passwordVariable: &quot;GITHUB_ACCESS_TOKEN&quot;)])
                    {
                        def authenticatedRepository = &apos;https://${GITHUB_APP}:${GITHUB_ACCESS_TOKEN}@&apos; + unauthenticatedRepository
                        sh script: &quot;&quot;&quot;git config user.email ${userEmail}
                            git config user.name ${userName}
                            mvn --batch-mode -V -e versions:set -DnewVersion=${releaseVersion} -DgenerateBackupPoms=false
                            git add -u
                            git commit -m &quot;[jenkins] Releasing version ${releaseVersion}&quot;
                            git tag release-${releaseVersion}
                            git checkout ${branch}
                            mvn --batch-mode -e versions:set -DnewVersion=${nextVersion} -DgenerateBackupPoms=false
                            git add -u
                            git diff-index --quiet HEAD || git commit -m &quot;[jenkins] Incrementing version to ${nextVersion}&quot;
                            git push ${authenticatedRepository} ${branch}
                            git push ${authenticatedRepository} release-${releaseVersion}&quot;&quot;&quot;
                    }
                }

                // Open a new staging repository and capture its ID
                def output = sh returnStdout: true, script: &quot;&quot;&quot;git checkout tags/release-${releaseVersion}
                    mvn --batch-mode -e -DstagingProfileId=${stagingProfileId} nexus-staging:rc-open&quot;&quot;&quot;
                echo output
                stagingRepositoryId = ( output =~ /Opened (${repositoryIdPrefix}-\d+)/ ) [0][1]
            }
        }
    }
}

// Build and release from all platforms
try
{
    parallel linux:
    {
        // Linux deploys the portable modules as well as its platform-specific binaries.
        // Remaining platforms only deploy platform-specific binaries.
        node(&quot;linux&quot;)
        {
            timeout(10)
            {
                stage(&quot;Checkout&quot;)
                {
                    // Wipe out local repository in case it contains extra commits from a previous (broken) build
                    deleteDir()
                    checkout([$class: &quot;GitSCM&quot;, branches: [[name: &quot;refs/tags/release-${releaseVersion}&quot;]], browser: [$class: &quot;GithubWeb&quot;, repoUrl: repository], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &quot;LocalBranch&quot;, localBranch: &quot;release-${releaseVersion}&quot;], [$class: &quot;CleanCheckout&quot;], [$class: &quot;WipeWorkspace&quot;], [$class: &quot;MessageExclusion&quot;, excludedMessage: &quot;^\\[jenkins\\]&quot;]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &quot;github-cmake-maven-project&quot;, url: repository]]])
                }
            }
            timeout(40)
            {
                // gpg resides in /usr/local/bin
                withEnv([&quot;JAVA_HOME=${ tool &quot;JDK11_HOME&quot; }&quot;, &quot;PATH+MAVEN=${tool &quot;Maven&quot;}/bin:${env.JAVA_HOME}/bin:/usr/local/bin&quot;])
                {
                    stage(&quot;Deploy (linux)&quot;)
                    {
                        // Deploy both Java and native artifacts
                        // Use the same GCC version as AWS. See top of this script for more information.

                        // sudo apt-get install cmake gcc-6 g++-6 -y
                        // export CC=/usr/bin/gcc-6
                        // export CXX=/usr/bin/g++-6                        
                        sh script: &quot;&quot;&quot;sudo apt-get install build-essential -y
                          mvn --batch-mode -e -V -U -Dsurefire.useFile=false install
                          mvn --batch-mode -e -V -U -Dsurefire.useFile=false -DstagingProfileId=${stagingProfileId} -DstagingRepositoryId=${stagingRepositoryId} -Ddeploy -Dportable deploy&quot;&quot;&quot;
                        archiveArtifacts artifacts: &quot;**/target/*.jar&quot;, excludes: &quot;**/target/test-classes/**&quot;
                    }
                }
            }
        }
    }, mac:
    {
        node(&quot;mac&quot;)
        {
            timeout(10)
            {
                stage(&quot;Checkout (mac)&quot;)
                {
                    // Wipe out local repository in case it contains extra commits from a previous (broken) build
                    deleteDir()
                    checkout([$class: &quot;GitSCM&quot;, branches: [[name: &quot;refs/tags/release-${releaseVersion}&quot;]], browser: [$class: &quot;GithubWeb&quot;, repoUrl: repository], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &quot;LocalBranch&quot;, localBranch: &quot;release-${releaseVersion}&quot;], [$class: &quot;CleanCheckout&quot;], [$class: &quot;WipeWorkspace&quot;], [$class: &quot;MessageExclusion&quot;, excludedMessage: &quot;^\\[jenkins\\]&quot;]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &quot;github-cmake-maven-project&quot;, url: repository]]])
                }
            }
            timeout(40)
            {
                // gpg resides in /usr/local/bin
                withEnv([&quot;JAVA_HOME=${ tool &quot;JDK11_HOME&quot; }&quot;, &quot;PATH+MAVEN=${tool &quot;Maven&quot;}/bin:${env.JAVA_HOME}/bin:/usr/local/bin&quot;])
                {
                    stage(&quot;Deploy (mac)&quot;)
                    {
                        sh script: &quot;&quot;&quot;mvn --batch-mode -e -V -U -Dsurefire.useFile=false install
                            cd cmake-binaries
                            mvn --batch-mode -e -V -U -Dsurefire.useFile=false -DstagingProfileId=${stagingProfileId} -DstagingRepositoryId=${stagingRepositoryId} -Ddeploy deploy&quot;&quot;&quot;
                        archiveArtifacts artifacts: &quot;**/target/*.jar&quot;, excludes: &quot;**/target/test-classes/**&quot;
                    }
                }
            }
        }
    }, windows:
    {
        node(&quot;windows&quot;)
        {
            timeout(10)
            {
                stage(&quot;Checkout (windows)&quot;)
                {
                    // Wipe out local repository in case it contains extra commits from a previous (broken) build
                    deleteDir()
                    checkout([$class: &quot;GitSCM&quot;, branches: [[name: &quot;refs/tags/release-${releaseVersion}&quot;]], browser: [$class: &quot;GithubWeb&quot;, repoUrl: repository], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &quot;LocalBranch&quot;, localBranch: &quot;release-${releaseVersion}&quot;], [$class: &quot;CleanCheckout&quot;], [$class: &quot;WipeWorkspace&quot;], [$class: &quot;MessageExclusion&quot;, excludedMessage: &quot;^\\[jenkins\\]&quot;]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &quot;github-cmake-maven-project&quot;, url: repository]]])
                }
            }
            timeout(40)
            {
                // Windows needs a longer timeout due to Windows Defender (antivirus) slowing things down
                withEnv([&quot;JAVA_HOME=${ tool &quot;JDK11_HOME&quot; }&quot;, &quot;PATH+MAVEN=${tool &quot;Maven&quot;}/bin;${env.JAVA_HOME}/bin&quot;])
                {
                    stage(&quot;Deploy (windows)&quot;)
                    {
                        bat script: &quot;&quot;&quot;call mvn --batch-mode -e -V -U -Dsurefire.useFile=false install
                            cd cmake-binaries
                            call mvn --batch-mode -e -V -U -Dsurefire.useFile=false -DstagingProfileId=${stagingProfileId} -DstagingRepositoryId=${stagingRepositoryId} -Ddeploy deploy&quot;&quot;&quot;
                        archiveArtifacts artifacts: &quot;**/target/*.jar&quot;, excludes: &quot;**/target/test-classes/**&quot;
                    }
                }
            }
        }
    },
    failFast: true
}
catch (e)
{
    echo &quot;Dropping staging repository due to error&quot;
    try
    {
        // Drop staging repository
        node(&quot;linux&quot;)
        {
            timeout(10)
            {
                stage(&quot;Checkout (linux)&quot;)
                {
                    // Wipe out local repository in case it contains extra commits from a previous (broken) build
                    deleteDir()
                    checkout([$class: &quot;GitSCM&quot;, branches: [[name: &quot;refs/tags/release-${releaseVersion}&quot;]], browser: [$class: &quot;GithubWeb&quot;, repoUrl: repository], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &quot;LocalBranch&quot;, localBranch: &quot;release-${releaseVersion}&quot;], [$class: &quot;CleanCheckout&quot;], [$class: &quot;WipeWorkspace&quot;], [$class: &quot;MessageExclusion&quot;, excludedMessage: &quot;^\\[jenkins\\]&quot;]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &quot;github-cmake-maven-project&quot;, url: repository]]])
                }
            }
            timeout(5)
            {
                withEnv([&quot;JAVA_HOME=${ tool &quot;JDK11_HOME&quot; }&quot;, &quot;PATH+MAVEN=${tool &quot;Maven&quot;}/bin:${env.JAVA_HOME}/bin&quot;])
                {
                    sh script: &quot;mvn --batch-mode -e -V -U -DstagingProfileId=${stagingProfileId} -DstagingRepositoryId=${stagingRepositoryId} nexus-staging:rc-drop&quot;
                }
            }
        }
    }
    catch (e2)
    {
        // Ignore and throw the original exception
    }
    throw e;
}

// Close the release
node(&quot;linux&quot;)
{
    timeout(10)
    {
        stage(&quot;Checkout (linux)&quot;)
        {
            // Wipe out local repository in case it contains extra commits from a previous (broken) build
            deleteDir()
            checkout([$class: &quot;GitSCM&quot;, branches: [[name: &quot;refs/tags/release-${releaseVersion}&quot;]], browser: [$class: &quot;GithubWeb&quot;, repoUrl: repository], doGenerateSubmoduleConfigurations: false, extensions: [[$class: &quot;LocalBranch&quot;, localBranch: &quot;release-${releaseVersion}&quot;], [$class: &quot;CleanCheckout&quot;], [$class: &quot;WipeWorkspace&quot;], [$class: &quot;MessageExclusion&quot;, excludedMessage: &quot;^\\[jenkins\\]&quot;]], submoduleCfg: [], userRemoteConfigs: [[credentialsId: &quot;github-cmake-maven-project&quot;, url: repository]]])
        }
    }
    timeout(10)
    {
        withEnv([&quot;JAVA_HOME=${ tool &quot;JDK11_HOME&quot; }&quot;, &quot;PATH+MAVEN=${tool &quot;Maven&quot;}/bin:${env.JAVA_HOME}/bin&quot;])
        {
            stage(&quot;Close release&quot;)
            {
                sh script: &quot;mvn --batch-mode -e -V -U -DstagingProfileId=${stagingProfileId} -DstagingRepositoryId=${stagingRepositoryId} nexus-staging:rc-close&quot;
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>